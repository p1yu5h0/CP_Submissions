class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        
        int n=coins.size(), w=amount;
        int dp[n+1][w+1];
        
        //initialize first column
        for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        
        //initialize first row
        for (int i=0;i<=w;i++){
            dp[0][i] = INT_MAX - 1;
        }
        
        //initialize second row
        for(int j=1;j<=w;j++){
            if(j % coins[0] == 0)
                dp[1][j] = j / coins[0];
            else
                dp[1][j] = INT_MAX-1;
        }
        
        //main code
        for(int i=2;i<=n;i++){
            for(int j=1;j<=w;j++){
                if(coins[i-1]<=j){
                    dp[i][j] = min(1 + dp[i][j-coins[i-1]], dp[i-1][j]);
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        if(dp[n][w]==INT_MAX-1){
            return -1;
        }
        return dp[n][w];
        
    }
};

/*
- this is a special case of unbounded knapsack in which we need to do initialization in second row also
- specifically in this question only we have to do this 
- lets look at some observations 
- here we can see that this is a case of unbounded knapsack 
- in the first row after analysing some of the boxes we can we that we need infinte numbers to fill them
- to reach the desired sum 
- but we use INT_MAX - 1 because in the main dp code we have to add one otherwise there will be integer overflow
- dp[i][j] = min(1 + dp[i][j-coins[i-1]], dp[i-1][j]);
- in this we add 1 because value[] array is filled with value of coin that is 1
- also we can see in first column after anaysing we see that we need to fill them with 0 
- now ask from yourself that this much initialization is enough?
- the answer is no 
- we need to initialize the second row becaus in the first row we have int_max which dont help in the construction of below rows
- lets think how to fill this second row 
- after analysing some of the boxes we can see that
- in analyzation we need to consider the first element of the given array 
- after seeing some of the boxes we see that if sum(j) of that paricular box is a multiple of arr[0] then we need to fill by 1
- otherwise we need to fill with INT_MAX-1
- now lets write our dp code 
- dont know why WA in example 2
*/
