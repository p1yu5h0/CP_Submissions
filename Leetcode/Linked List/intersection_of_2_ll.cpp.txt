/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int length(ListNode* head){
        int l = 0;
        ListNode* temp = head;
        while(temp!=NULL){
            temp=temp->next;
            l++;
        }
        return l;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lengtha = length(headA);
        int lengthb = length(headB);
        
        int d = 0;
        ListNode* ptr1; //ptr1 points to larger length LL
        ListNode* ptr2; //ptr2 points to shorter length LL
        
        if(lengtha>lengthb){
            d = lengtha - lengthb;
            ptr1 = headA;
            ptr2 = headB;
        } else {
            d = lengthb - lengtha;
            ptr1 = headB;
            ptr2 = headA;
        }
        
        while(d){
            //we reached at the requird position of this pointer ie. sync with other ptr
            ptr1 = ptr1->next;
            if(ptr1==nullptr){
                return ptr1;
            }
            d--;
        }
        
        while(ptr1!=nullptr and ptr2!=nullptr){
            if(ptr1==ptr2){
                return ptr1;
            }
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        
        return ptr1;
    }
};