class Solution {
public:
    int change(int sum, vector<int>& coins) {
        //classic knapsack 0/1 problem
        int n = coins.size();
        int dp[n+1][sum+1];


        //Initialization
        for (int i = 0; i < n + 1; i++) { // Array Length
            for (int j = 0; j < sum + 1; j++) { // Sum from 0 to sum + 1;
                if (i == 0) dp[i][j] = 0;
                if (j == 0) dp[i][j] = 1;
            }
        }

        dp[0][0] = 1;

        //Main Part!
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < sum + 1; j++) {
                if (coins[i - 1] > j) 
                    dp[i][j] = dp[i - 1][j];
                else 
                    dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]];
            }
        }

        //Answer!
        return dp[n][sum];
    }
};