class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size(), m=nums2.size();
        
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++)
            dp[i][0]=0;
        for(int i=0;i<=m;i++)
            dp[0][i]=0;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(nums1[i-1]==nums2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        
        int maxi=0;
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                maxi = max(maxi,dp[i][j]);
            }
        }
        return maxi;
    }
};
/*
- this question is just longest common substring just only we have numbers instead of characters
- we also know that longest common substring is just a small variation of LCS 
- LCS is longest common subsequence
- here in else condition of LCS we just store the value zero inside the table 
- in the end return the maximum value inside the table 
*/